{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpErrorResponse } from \"@angular/common/http\";\nimport { catchError } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { ErrorService } from \"./services/error.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"./services/error.service\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(dialog, errorService) {\n      this.dialog = dialog;\n      this.errorService = errorService;\n    }\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(error => {\n        let errorMessage = \"An unkown error occured\";\n        if (error.error.message) {\n          errorMessage = error.error.message;\n        }\n        this.errorService.addErrors(errorMessage);\n        return throwError(error);\n      }));\n    }\n    static #_ = this.ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.MatDialog), i0.ɵɵinject(i2.ErrorService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac\n    });\n  }\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}