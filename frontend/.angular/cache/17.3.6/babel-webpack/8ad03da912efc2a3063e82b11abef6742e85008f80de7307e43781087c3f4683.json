{"ast":null,"code":"import { Chart } from \"chart.js\";\nimport { CurrencyService } from \"../../services/currency.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/currency.service\";\nexport let CurrencyGraphsComponent = /*#__PURE__*/(() => {\n  class CurrencyGraphsComponent {\n    constructor(currencyService) {\n      this.currencyService = currencyService;\n    }\n    ngOnInit() {\n      this.currencyService.getCurrencies();\n      this.currencyService.getUpdatedCurrenciesListner().subscribe(currencies => {\n        this.currencies = currencies;\n        this.min = 1;\n        this.max = 11;\n        this.chart = new Chart(\"marketCap\", {\n          type: \"bar\",\n          data: {\n            labels: this.currencies.map(cur => cur.name).slice(this.min, this.max),\n            datasets: [{\n              label: \"Market Cap\",\n              data: this.currencies.map(cur => cur.USD.market_cap).slice(this.min, this.max),\n              backgroundColor: sameColorArray(\"rgba(0, 0, 255, 0.3)\", this.max - this.min)\n            }, {\n              label: \"Volume 24h\",\n              data: this.currencies.map(cur => cur.USD.volume_24h).slice(this.min, this.max),\n              backgroundColor: sameColorArray(\"rgba(0, 255, 0, 0.3)\", this.max - this.min)\n            }]\n          },\n          options: {\n            plugins: {\n              tooltip: {\n                callbacks: {\n                  title: function () {\n                    return \"\";\n                  },\n                  label: function (context) {\n                    return context.parsed.x + \": $\" + context.parsed.y.toLocaleString();\n                  }\n                }\n              }\n            },\n            scales: {\n              y: {\n                ticks: {\n                  // Include a dollar sign in the ticks\n                  callback: function (value, index, values) {\n                    return \"$\" + value.toLocaleString();\n                  }\n                },\n                title: {\n                  display: true,\n                  text: \"Value in USD\" // Add a title for the y-axis\n                }\n              }\n            }\n          }\n        });\n      });\n    }\n    static #_ = this.ɵfac = function CurrencyGraphsComponent_Factory(t) {\n      return new (t || CurrencyGraphsComponent)(i0.ɵɵdirectiveInject(i1.CurrencyService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CurrencyGraphsComponent,\n      selectors: [[\"app-currency-graphs\"]],\n      decls: 7,\n      vars: 4,\n      consts: [[1, \"container\"], [3, \"hidden\"], [\"id\", \"marketCap\"], [\"id\", \"volume24h\"]],\n      template: function CurrencyGraphsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"canvas\", 2);\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"div\", 1)(5, \"canvas\", 3);\n          i0.ɵɵtext(6);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"hidden\", !ctx.chart);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.chart);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"hidden\", !ctx.chart);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.chart);\n        }\n      }\n    });\n  }\n  return CurrencyGraphsComponent;\n})();\nfunction sameColorArray(color, num) {\n  var colorArr = [];\n  for (var i = 0; i < num; i++) {\n    colorArr[i] = color;\n  }\n  return colorArr;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}