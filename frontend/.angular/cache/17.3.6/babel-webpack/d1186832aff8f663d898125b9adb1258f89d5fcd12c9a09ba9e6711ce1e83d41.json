{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst BACKEND_COIN_URL = environment.backendApiUrl + \"/coins\";\nconst BACKEND_WALLET_URL = environment.backendApiUrl + \"/wallets\";\nconst BACKEND_LEADER_BOARD_URL = environment.backendApiUrl + \"/leaderboards\";\nconst BACKEND_USER_URL = environment.backendApiUrl + \"/user\";\nconst BACKEND_CURRENCY_URL = environment.backendApiUrl + \"/cmc\";\nexport let CurrencyService = /*#__PURE__*/(() => {\n  class CurrencyService {\n    constructor(http) {\n      this.http = http;\n      //This is the list of currencies that we get from the api\n      this.currencies = [];\n      this.favorites = [];\n      this.wallets = [];\n      //Registers change in currencies\n      this.currenciesUpdated = new Subject();\n      this.walletsUpdated = new Subject();\n      this.activeWalletIdUpdated = new Subject();\n      //Registers change in dollars\n      this.dollarsUpdated = new Subject();\n    }\n    getWallets() {\n      this.http.get(BACKEND_WALLET_URL).pipe(map(responseData => {\n        return responseData.walletArray.map(curWallet => {\n          return {\n            id: curWallet[0]._id,\n            owner: curWallet[0].owner,\n            name: curWallet[0].name,\n            dollars: curWallet[0].dollars,\n            coins: curWallet[1]\n          };\n        });\n      })).subscribe(wallets => {\n        this.wallets = wallets;\n        this.walletsUpdated.next([...this.wallets]);\n      });\n    }\n    getCurrencies() {\n      return this.http.get(BACKEND_CURRENCY_URL).pipe(map(curData => {\n        //Only the .data attribute is what we are interested in\n        return curData.currencies.map(curCurrency => {\n          return {\n            id: curCurrency.id,\n            name: curCurrency.name,\n            symbol: curCurrency.symbol,\n            rank: curCurrency.cmc_rank,\n            circulating_supply: curCurrency.circulating_supply,\n            total_supply: curCurrency.total_supply,\n            max_supply: curCurrency.max_supply,\n            USD: {\n              price: curCurrency.quote.USD.price,\n              volume_24h: curCurrency.quote.USD.volume_24h,\n              market_cap: curCurrency.quote.USD.market_cap,\n              percent_change_1h: curCurrency.quote.USD.percent_change_1h,\n              percent_change_24h: curCurrency.quote.USD.percent_change_24h,\n              percent_change_7d: curCurrency.quote.USD.percent_change_7d\n            }\n          };\n        });\n      })).subscribe(extractedCurs => {\n        this.currencies = extractedCurs;\n        this.currenciesUpdated.next([...this.currencies]);\n      });\n    }\n    getActiveWalletId() {\n      this.http.get(BACKEND_WALLET_URL + \"/activeWallet\").subscribe(response => {\n        if (response.wallet) {\n          this.activeWalletId = response.wallet._id;\n          this.activeWalletIdUpdated.next(this.activeWalletId);\n        }\n      });\n    }\n    getDollars() {\n      this.http.get(BACKEND_WALLET_URL + \"/dollars\").subscribe(response => {\n        if (response.dollars) {\n          this.dollarsUpdated.next(response.dollars);\n        }\n      });\n    }\n    getLeaderBoard() {\n      return this.http.get(BACKEND_LEADER_BOARD_URL);\n    }\n    buyCoin(cost, coinId, walletId) {\n      const coinToBuy = {\n        coinId: coinId,\n        cost: cost,\n        walletId: walletId\n      };\n      this.http.post(BACKEND_COIN_URL + \"/buy\", coinToBuy).subscribe(response => {\n        this.getWallets();\n        this.dollarsUpdated.next(response.dollars);\n      });\n    }\n    sellCoin(ammount, coinId, walletId) {\n      const coinToSell = {\n        coinId: coinId,\n        ammount: ammount,\n        walletId: walletId\n      };\n      this.http.put(BACKEND_COIN_URL + \"/sell\", coinToSell).subscribe(response => {\n        this.getWallets();\n        this.dollarsUpdated.next(response.dollars);\n      });\n    }\n    createWallet(name, dollars) {\n      const walletData = {\n        name: name,\n        dollars: dollars\n      };\n      this.http.post(BACKEND_WALLET_URL, walletData).subscribe(response => {\n        this.getWallets();\n      });\n    }\n    changeActiveWallet(activeWalletId) {\n      const changeWalletInfo = {\n        walletId: activeWalletId\n      };\n      this.http.put(BACKEND_USER_URL + \"/changeCurWallet\", changeWalletInfo).subscribe(response => {\n        this.activeWalletId = response.curWalletId;\n        this.activeWalletIdUpdated.next(this.activeWalletId);\n      });\n    }\n    deleteWallet(walletId) {\n      this.http.delete(BACKEND_WALLET_URL + \"/\" + walletId).subscribe(response => {\n        this.getActiveWalletId();\n        this.getWallets();\n      });\n    }\n    changeWalletName(name, walletId) {\n      const walletInfo = {\n        name: name\n      };\n      this.http.put(BACKEND_WALLET_URL + \"/changeName/\" + walletId, walletInfo).subscribe(response => {\n        this.getWallets();\n      });\n    }\n    findTotalValue(walletId) {\n      //this.getCurrencies();\n      //this.getWallets();\n      const wallet = this.findItemById(walletId, this.wallets);\n      var total = wallet.dollars;\n      for (let coin of wallet.coins) {\n        total += coin.ammount * this.findItemById(coin.id, this.currencies).USD.price;\n      }\n      return total;\n    }\n    findActiveWalletById(activeWalletId) {\n      for (let wallet of this.wallets) {\n        if (activeWalletId == wallet.id) {\n          return wallet;\n        }\n      }\n      return;\n    }\n    getUpdatedCurrenciesListner() {\n      return this.currenciesUpdated.asObservable();\n    }\n    getUpdatedWalletsListner() {\n      return this.walletsUpdated.asObservable();\n    }\n    getUpdatedActiveWalletIdListner() {\n      return this.activeWalletIdUpdated.asObservable();\n    }\n    getUpdatedDollarListener() {\n      return this.dollarsUpdated.asObservable();\n    }\n    findItemById(id, inArr) {\n      for (var i = 0; i < inArr.length; i++) {\n        if (inArr[i].id == id) {\n          return inArr[i];\n        }\n      }\n      return null;\n    }\n    static #_ = this.ɵfac = function CurrencyService_Factory(t) {\n      return new (t || CurrencyService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CurrencyService,\n      factory: CurrencyService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return CurrencyService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}