{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { Subject } from \"rxjs\";\nimport { Router } from \"@angular/router\";\nimport { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst BACKEND_USER_URL = environment.backendApiUrl + \"/user\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.isAuthenticated = false;\n      this.userNameListner = new Subject();\n      this.authStatusListner = new Subject();\n    }\n    getToken() {\n      return this.token;\n    }\n    //This is used because \"getUserNameListner()\" isn't orignally trigered\n    getUserName() {\n      return this.userName;\n    }\n    //This is used because \"getAuthStatusListner()\" isn't orignally trigered\n    getIsAuth() {\n      return this.isAuthenticated;\n    }\n    getUserId() {\n      return this.userId;\n    }\n    //Shows whether user is currently authenticated\n    getAuthStatusListner() {\n      return this.authStatusListner.asObservable();\n    }\n    getUserNameListner() {\n      return this.userNameListner.asObservable();\n    }\n    createUser(email, userName, password) {\n      const authData = {\n        email: email,\n        userName: userName,\n        password: password\n      };\n      this.http.post(BACKEND_USER_URL + \"/signup\", authData).subscribe(response => {\n        this.login(email, password);\n      }, error => {\n        this.authStatusListner.next(false);\n        this.userNameListner.next(null);\n      });\n    }\n    login(email, password) {\n      const authData = {\n        email: email,\n        password: password\n      };\n      this.http.post(BACKEND_USER_URL + \"/login\", authData).subscribe(response => {\n        this.token = response.token;\n        if (this.token) {\n          //Finds how long token is valid for, then timer is set\n          const expiresInDuaration = response.expiresIn;\n          this.setAuthTimer(expiresInDuaration);\n          this.isAuthenticated = true;\n          this.userName = response.userName;\n          this.userId = response.userId;\n          this.authStatusListner.next(true);\n          this.userNameListner.next(this.userName);\n          const now = new Date();\n          const expirationDate = new Date(now.getTime() + expiresInDuaration * 1000);\n          this.saveAuthData(this.token, expirationDate, this.userName, this.userId);\n          this.router.navigate([\"/\"]);\n        }\n      }, error => {\n        this.authStatusListner.next(false);\n        this.userNameListner.next(null);\n      });\n    }\n    logout() {\n      this.token = null;\n      this.isAuthenticated = false;\n      this.userName = null;\n      this.userId = null;\n      this.authStatusListner.next(this.isAuthenticated);\n      this.userNameListner.next(this.userName);\n      clearTimeout(this.tokenTimer);\n      this.clearAuthData();\n      this.router.navigate([\"/\"]);\n    }\n    //This is called whenever the app is started to see whether the token in local storage is still valid\n    autoAuthUser() {\n      const authInformation = this.getAuthData();\n      if (!authInformation) {\n        return;\n      }\n      const now = new Date();\n      const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\n      if (expiresIn > 0) {\n        this.token = authInformation.token;\n        this.isAuthenticated = true;\n        this.userName = authInformation.userName;\n        this.userId = authInformation.userId;\n        this.setAuthTimer(expiresIn / 1000);\n        this.authStatusListner.next(this.isAuthenticated);\n        this.userNameListner.next(this.userName);\n      }\n    }\n    setAuthTimer(duration) {\n      this.tokenTimer = setTimeout(() => {\n        this.logout();\n      }, duration * 1000);\n    }\n    //This information should be saved locally so logins can persist for a prolonged period of time\n    saveAuthData(token, expirateData, userName, userId) {\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expiration\", expirateData.toISOString());\n      localStorage.setItem(\"userName\", userName);\n      localStorage.setItem(\"userId\", userId);\n    }\n    clearAuthData() {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"expiration\");\n      localStorage.removeItem(\"userName\");\n      localStorage.removeItem(\"userId\");\n    }\n    getAuthData() {\n      const token = localStorage.getItem(\"token\");\n      const expirationDate = localStorage.getItem(\"expiration\");\n      const userId = localStorage.getItem(\"userId\");\n      const userName = localStorage.getItem(\"userName\");\n      if (!token || !expirationDate) {\n        return;\n      }\n      return {\n        token: token,\n        expirationDate: new Date(expirationDate),\n        userName: userName,\n        userId: userId\n      };\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}