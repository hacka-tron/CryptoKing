{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, Output, NgModule } from '@angular/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport Chart from 'chart.js/auto';\n\n/**\n * Chart groups a collection of contents in tabs.\n * @group Components\n */\nlet UIChart = /*#__PURE__*/(() => {\n  class UIChart {\n    platformId;\n    el;\n    zone;\n    /**\n     * Type of the chart.\n     * @group Props\n     */\n    type;\n    /**\n     * Array of per-chart plugins to customize the chart behaviour.\n     * @group Props\n     */\n    plugins = [];\n    /**\n     * Width of the chart.\n     * @group Props\n     */\n    width;\n    /**\n     * Height of the chart.\n     * @group Props\n     */\n    height;\n    /**\n     * Whether the chart is redrawn on screen size change.\n     * @group Props\n     */\n    responsive = true;\n    /**\n     * Used to define a string that autocomplete attribute the current element.\n     * @group Props\n     */\n    ariaLabel;\n    /**\n     * Establishes relationships between the component and label(s) where its value should be one or more element IDs.\n     * @group Props\n     */\n    ariaLabelledBy;\n    /**\n     * Data to display.\n     * @group Props\n     */\n    get data() {\n      return this._data;\n    }\n    set data(val) {\n      this._data = val;\n      this.reinit();\n    }\n    /**\n     * Options to customize the chart.\n     * @group Props\n     */\n    get options() {\n      return this._options;\n    }\n    set options(val) {\n      this._options = val;\n      this.reinit();\n    }\n    /**\n     * Callback to execute when an element on chart is clicked.\n     * @group Emits\n     */\n    onDataSelect = new EventEmitter();\n    isBrowser = false;\n    initialized;\n    _data;\n    _options = {};\n    chart;\n    constructor(platformId, el, zone) {\n      this.platformId = platformId;\n      this.el = el;\n      this.zone = zone;\n    }\n    ngAfterViewInit() {\n      this.initChart();\n      this.initialized = true;\n    }\n    onCanvasClick(event) {\n      if (this.chart) {\n        const element = this.chart.getElementsAtEventForMode(event, 'nearest', {\n          intersect: true\n        }, false);\n        const dataset = this.chart.getElementsAtEventForMode(event, 'dataset', {\n          intersect: true\n        }, false);\n        if (element && element[0] && dataset) {\n          this.onDataSelect.emit({\n            originalEvent: event,\n            element: element[0],\n            dataset: dataset\n          });\n        }\n      }\n    }\n    initChart() {\n      if (isPlatformBrowser(this.platformId)) {\n        let opts = this.options || {};\n        opts.responsive = this.responsive;\n        // allows chart to resize in responsive mode\n        if (opts.responsive && (this.height || this.width)) {\n          opts.maintainAspectRatio = false;\n        }\n        this.zone.runOutsideAngular(() => {\n          this.chart = new Chart(this.el.nativeElement.children[0].children[0], {\n            type: this.type,\n            data: this.data,\n            options: this.options,\n            plugins: this.plugins\n          });\n        });\n      }\n    }\n    getCanvas() {\n      return this.el.nativeElement.children[0].children[0];\n    }\n    getBase64Image() {\n      return this.chart.toBase64Image();\n    }\n    generateLegend() {\n      if (this.chart) {\n        return this.chart.generateLegend();\n      }\n    }\n    refresh() {\n      if (this.chart) {\n        this.chart.update();\n      }\n    }\n    reinit() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.initChart();\n      }\n    }\n    ngOnDestroy() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.initialized = false;\n        this.chart = null;\n      }\n    }\n    static ɵfac = function UIChart_Factory(t) {\n      return new (t || UIChart)(i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: UIChart,\n      selectors: [[\"p-chart\"]],\n      hostAttrs: [1, \"p-element\"],\n      inputs: {\n        type: \"type\",\n        plugins: \"plugins\",\n        width: \"width\",\n        height: \"height\",\n        responsive: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"responsive\", \"responsive\", booleanAttribute],\n        ariaLabel: \"ariaLabel\",\n        ariaLabelledBy: \"ariaLabelledBy\",\n        data: \"data\",\n        options: \"options\"\n      },\n      outputs: {\n        onDataSelect: \"onDataSelect\"\n      },\n      features: [i0.ɵɵInputTransformsFeature],\n      decls: 2,\n      vars: 8,\n      consts: [[2, \"position\", \"relative\"], [\"role\", \"img\", 3, \"click\"]],\n      template: function UIChart_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"canvas\", 1);\n          i0.ɵɵlistener(\"click\", function UIChart_Template_canvas_click_1_listener($event) {\n            return ctx.onCanvasClick($event);\n          });\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵstyleProp(\"width\", ctx.responsive && !ctx.width ? null : ctx.width)(\"height\", ctx.responsive && !ctx.height ? null : ctx.height);\n          i0.ɵɵadvance();\n          i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledBy)(\"width\", ctx.responsive && !ctx.width ? null : ctx.width)(\"height\", ctx.responsive && !ctx.height ? null : ctx.height);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return UIChart;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ChartModule = /*#__PURE__*/(() => {\n  class ChartModule {\n    static ɵfac = function ChartModule_Factory(t) {\n      return new (t || ChartModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ChartModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n  return ChartModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartModule, UIChart };\n//# sourceMappingURL=primeng-chart.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}